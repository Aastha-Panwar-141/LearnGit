compiled - check symentic of code before execution
e.g. - c. c++, .net, etc

interpreted - line by line execution of code , it through error if it find any error at the particular line, don't whole code .
e.g. - python, java(compiled and interpreted), php 

ruby is pure object oriented bcoz everything is an object except methods.
class of an object in ruby decided at runtime


using rbenv
using rvm(ruby version manager)
from source


Interpreted Ruby(IRb)
3.0.0 :001 > a=10
 => 10 
3.0.0 :002 > a.class
 => Integer 
3.0.0 :003 > a="aastha"
 => "aastha" 
3.0.0 :004 > a.class
 => String 
3.0.0 :005 > a=[1,2,3]
 => [1, 2, 3] 
3.0.0 :006 > a.class
 => Array 
3.0.0 :007 > a={name: "naman"}
 => {:name=>"naman"} 
3.0.0 :008 > a.class
 => Hash 


Memory addresses of variables
3.0.0 :009 > a=2
 => 2 
3.0.0 :010 > b=3
 => 3 
3.0.0 :011 > a.object_id
 => 5 
3.0.0 :012 > b.object_id
 => 7 
3.0.0 :013 > str= "hello aastha"
 => "hello aastha" 
3.0.0 :014 > str.object_id
 => 260 


#VARIABLES

1. what do you mean by variables?
memory locations where we can store some values.

2. what are variables in ruby?
object of some classes.

3. what are constants in ruby?
something thats value can't be changed once declared , must starts with capital letters
eg. A= 10, here A is constant, if we try to change than we get error.
3.0.0 :015 > A=10
 => 10 
3.0.0 :016 > A=5
(irb):16: warning: already initialized constant A
(irb):15: warning: previous definition of A was here
 => 5 


4. how to define variables in ruby?

5. how to get memory address of a variable in ruby?
a.object_id, by invoking object_id on particular object or variable.

#TYPES OF VARIABLES
1. Local     - underscore(_), lowercase
2. class     - @@
3. instance  - 
4. global    -
5. constants -

>>> Local Variables - Local variables begin with a lowercase letter or _. The scope of a local variable ranges from class, module, def, or do to the corresponding end or from a block's opening brace to its close brace {}.

3.0.0 :017 > if a<b
3.0.0 :018 >   puts "hello world"
3.0.0 :019 > else
3.0.0 :020 >   puts "welcome"
3.0.0 :021 > end
hello world
 => nil 


 3.0.0 :028 > def example_method
3.0.0 :029 >   abc =10
3.0.0 :030 >   puts abc*10     //10*10=100
3.0.0 :031 > end
 => :example_method 
3.0.0 :032 > example_method     //calling of example_method
100


scope of 'abc' or local variable is only in the block or method where it is define.
if using outside the block/method, than this error is occur:
NameError (undefined local variable or method `abc' for main:Object)



>>> Class Variables - Class variables begin with @@ and must be initialized before they can be used in method definitions.

3.0.0 :037 > class Student
3.0.0 :038 >   @@student_count = 0  #class variable
3.0.0 :039 >   
3.0.0 :040 >   def initialize(name, standard)
3.0.0 :041 >     @name= name        #instance variable 
3.0.0 :042 >     @standard = standard  #instance variable 
3.0.0 :043 >   end
3.0.0 :044 >   
3.0.0 :045 >   def total_students
3.0.0 :046 >     @@student_count +=1  #can't use directly here, need to initialize before this method
3.0.0 :047 >     puts "Total students are #{@@student_count}"
3.0.0 :048 >   end
3.0.0 :049 > end
 => :total_students 
3.0.0 :050 > s1 = Student.new("kanan","8th")
 => #<Student:0x0000562929b44bc0 @name="kanan", @standard="8th"> 
3.0.0 :051 > s2 = Student.new("naman","10th")
 => #<Student:0x0000562929b17d00 @name="naman", @standard="10th"> 
3.0.0 :052 > s1.total_students
Total students are 1
 => nil 
3.0.0 :053 > s2.total_students
Total students are 2
 => nil 



#difference between local and instance variable is if we define nothing to any local variable than it shows the nameerror and with instance variable is shows 'nil' object
3.0.0 :055 > z   #local
Traceback (most recent call last):
        5: from /home/hp/.rvm/rubies/ruby-3.0.0/bin/irb:23:in `<main>'
        4: from /home/hp/.rvm/rubies/ruby-3.0.0/bin/irb:23:in `load'
        3: from /home/hp/.rvm/rubies/ruby-3.0.0/lib/ruby/gems/3.0.0/gems/irb-1.3.0/exe/irb:11:in `<top (required)>'
        2: from (irb):54:in `<main>'
        1: from (irb):55:in `rescue in <main>'
NameError (undefined local variable or method `z' for main:Object)
3.0.0 :056 > @z   #instance
 => nil 


>>> Global Variables - Global variables begin with $. Uninitialized global variables have the value nil and produce warnings with the -w option.

"NOT RECOMMENDED" bcoz it can vconflict our program , so try to avoid to use global variables 
eg. 
3.0.0 :057 > $default_country = 'india'
 => "india" 
3.0.0 :058 > $default_country = 'indonasia'
 => "indonasia"


>>> Constant Variables - Constants begin with an uppercase letter.Can't change it's value throughout the program. Anything starts with Capital letter is constant. 



#QUESTIONS

1. How many types of variables - 5

2. What is diff b/w class variables and instance var. - 

3. what is scope of local var. 
The scope of a local variable ranges from class, module, def, or do to the corresponding end or from a block's opening brace to its close brace {}.

4. what is disadv. of global variable?
Assignment to global variables alters the global status. It is not recommended to use global variables. They make programs cryptic.

5. what happen when you reference an uninitialized local variable?
NameError (undefined local variable or method `z' for main:Object)

6. what happen when you reference an uninitialized constant?
NameError (uninitialized constant XYZ)

7. what happen when you reference an uninitialized instance var.?
nil